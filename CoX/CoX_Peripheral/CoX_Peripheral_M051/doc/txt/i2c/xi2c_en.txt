//*****************************************************************************
//
//! \defgroup I2C
//! 
//! \brief I2C Serial Interface Controller.
//!
//! I2C is two-wire, bi-directional serial bus to transfer data. One bus is SCL 
//! which provide the clock pulse for each data bit transfer on the other SDA bus.
//!
//! I2c can be configured as master mode or slave mode.Master mode provide clock
//! and start/stop signal. Arbitration exist between simultaneously transmitting
//! masters.
//!
//! Programmable clocks allow versatile rate control, i2c supports multiple 
//! address with mask option.
//!
//! Any of the status change will cause an interrupt if the interrupt enable 
//! bit has been set.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref Function_Description
//!   - \ref I2C_Protocol
//!   - \ref Data_Transfer
//!   .
//! - \ref Mode_Operation
//!   - \ref Master_Mode
//!   - \ref Slave_Mode
//!   .
//! - \ref I2C_Applications
//! .
//! 
//! <br />
//! \section Function_Description 1. Function Description
//!
//! <br />
//! \subsection I2C_Protocol 1.1 I2C Protocol
//! Normally, a standard communication consists of four parts:
//!
//! - 1) START or Repeated START signal generation
//! - 2) Slave address and R/W bit transfer
//! - 3) Data transfer
//! - 4) STOP signal generation
//! . 
//! <img src="i2c_protocol.png" />
//!
//! <br />
//! \subsection Data_Transfer 1.2 Data transfer
//! Master Transmits Data to Slave:
//! <img src="master_to_slave.png" />
//!
//! Master Reads Data form Slave:
//! <img src="slave_to_master.png" />
//!
//! <br />
//! \section Mode_Operation 2. Mode Operation
//! 
//! <br />
//! \subsection Slave_Mode 2.1 Slave Mode
//! - Slave Transmitter Mode
//! - Slave Receiver Mode
//! .
//! 
//! <br />
//! \subsection Master_Mode 2.2 Master Mode
//! - Master Receiver Mode
//! - Master Transmitter Mode
//! .
//! 
//! <br />
//! \section I2C_Applications 3. I2C Applications
//! Add in the future...
//!
//! <br />
//! \note Here describe the common function of the I2C Peripheral. The CoX
//! Peripheral Interface is based on the functions above.
//
//*****************************************************************************


//*****************************************************************************
//
//! \defgroup xI2C xI2C
//! 
//! \brief CoX I2C Peripheral Interface
//!
//! The xI2C is the I2C Peripheral Interface of CoX. It defines some common
//! macros and APIs.
//! 
//! <h1>Contents</h1>
//! - \ref CoX_I2C_How_Define
//! - \ref xI2C_API_Group
//!   - \ref xI2C_API_Init
//!   - \ref xI2C_API_Transfer
//!   - \ref xI2C_API_Interrupt
//!   .
//! - \ref xI2C_Usage 
//! .
//!
//! <br />
//!
//! \section CoX_I2C_How_Define 1. How is the xI2C Standard Define?
//! CoX I2C defines the APIs based on the following common functions:
//! - Init the I2C before transfer.
//!   - Master initialize function
//!   - Slave initialize function
//!   .
//! - Transfer functions.
//!   - Master transfer functions
//!   - Slave transfer functions
//!   .
//! - Interrupt funcions:
//!   - Master interrupt functions
//!   - Slave interrupt functions
//!   . 
//! .
//!
//! <br />
//! \section xI2C_API_Group 2. API Groups
//! 
//! The CoX I2C API is broken into three groups of functions: 
//! - those that deal with init the i2c, 
//! - those that deal with data transfer, 
//! - those that deal with the interrupt handler.
//! .
//!
//! <br />
//! \subsection xI2C_API_Init 2.1 I2C Init APIs
//! 
//! The I2C master init functions are:
//!  xI2CMasterInit()   
//! 
//! The I2C slave init functions are: 
//! - xI2CSlaveInit() 
//! - xI2CSlaveOwnAddressSet()
//! - xI2CSlaveOwnAddressMaskSet()
//! .
//! 
//! <br />
//! \subsection xI2C_API_Transfer 2.2 xI2C Transfer APIs
//! 
//! Master transfer API includes:
//! - xI2CMasterTransfer()
//! - xI2CMasterTransferComplete()
//! - xI2CMasterStatusGet()
//! - xI2CMasterWriteRequestS1()
//! - xI2CMasterWriteRequestS2()
//! - xI2CMasterWriteS1()
//! - xI2CMasterWriteS2()
//! - xI2CMasterWriteBufS1()
//! - xI2CMasterWriteBufS2()
//! - xI2CMasterReadRequestS1()
//! - xI2CMasterReadRequestS2()
//! - xI2CMasterReadLastRequestS2()
//! - xI2CMasterReadS1()
//! - xI2CMasterReadS2()
//! - xI2CMasterReadBufS1()
//! - xI2CMasterReadBufS2()
//! - xI2CMasterStop()
//! - xI2CMasterError()
//! - xI2CMasterDataPut()
//! - xI2CMasterDataGet()
//! .
//! 
//! Slave transfer API includes:
//! - xI2CSlaveTransferComplete()
//! - xI2CSlaveTransfer()
//! - xI2CSlaveStatusGet()
//! - xI2CSlaveDataPut()
//! - xI2CSlaveDataGet()
//! .
//! 
//! <br />
//! \subsection xI2C_API_Interrupt 2.3 I2C interrupt handler functions
//! 
//! The Callback functions
//! - xI2CIntCallbackInit()
//!
//! The master interrupt handler functions
//! - xI2CMasterIntEnable()
//! - xI2CMasterIntDisable()
//! - xI2CMasterIntFlagGet()
//! - xI2CMasterHandler()
//! .
//! 
//! The slave interrupt handler functions
//! - xI2CSlaveIntEnable()
//! - xI2CSlaveIntDisable()
//! - xI2CSlaveIntFlagGet()
//! - xI2CSlaveHandler()
//! .
//!
//! <br />
//! \section xI2C_Usage 3. Usage & Program Examples
//! The following example shows how to use the I2C API to initialize the master
//! I2C, and how to transfer data to slave.
//! 
//! \code
//! //*****************************************************************************
//! // 
//! // I2C transfer and receive data config
//! //
//! //*****************************************************************************
//! static tI2CMasterTransferCfg I2CMasterTrCfg;
//!
//! static unsigned char SendBuf[] = "MasterToSlv";
//! static unsigned long SendLength =  11;
//! static unsigned char SlaveAddress = 0x05;

//! //*****************************************************************************
//! //
//! // \brief something should do before the test execute of xi2c002 test.
//! //
//! // \return None.
//! //
//! //*****************************************************************************
//! void xI2CInit(void)
//! {
//!     //
//!     // Set System clock.
//!     //
//!     xSysCtlClockSet(12000000, xSYSCTL_XTAL_12MHZ | xSYSCTL_OSC_MAIN);
//!     //
//!     // Configure the i2c pin
//!     //
//!     xPinTypeI2C(I2C0SCL, PA11);
//!     xPinTypeI2C(I2C0DATA, PA10);
//!    
//!     //
//!     // Enable the i2c peripheral
//!     //
//!     xSysCtlPeripheralEnable(xSYSCTL_PERIPH_I2C0);
//!     
//!     //
//!     // I2C master transfer config
//!     //
//!     I2CMasterTrCfg.ulSlave = SlaveAddress;
//!     I2CMasterTrCfg.pvWBuf = SendBuf;
//!     I2CMasterTrCfg.ulWLen = SendLength;
//!     I2CMasterTrCfg.ulWCount = 0;
//!     I2CMasterTrCfg.pvRBuf = 0;
//!     I2CMasterTrCfg.ulRLen = 0;
//!     I2CMasterTrCfg.ulRCount = 0;      
//!   
//! }
//! 
//! //*****************************************************************************
//! //
//! // \brief xI2C main body.
//! //
//! // \return None.
//! //
//! //*****************************************************************************
//! void main(void)
//! {
//!     unsigned char ucFlag;
//!     xI2CInit();
//!     //
//!     // Init the I2C as master, change the rata form 0 to 2000000
//!     //    
//!     xI2CMasterInit(I2C0_BASE, 1000000);
//!     
//!     //
//!     // master transfer with polling mode
//!     //
//!     ucFlag = xI2CMasterTransfer(I2C0_BASE, &I2CMasterTrCfg, I2C_TRANSFER_POLLING);   
//!     
//!     while(1);
//! }
//!
//! \endcode
//! \todo 
//!
//
//*****************************************************************************