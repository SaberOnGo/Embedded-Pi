//*****************************************************************************
//
//! \defgroup NUC1xx_RTC NUC1xx RTC
//! 
//! \brief NUC1xx RTC Peripheral Driver.
//!
//! The CoX Peripheral Library also provides APIs 
//! for full functions of NUC1xx RTC.
//!
//! \n
//! <h1>Contents</h1>
//! - \ref NUC1xx_RTC_Block
//! - \ref NUC1xx_RTC_Function_Desc
//! - \ref NUC1xx_RTC_API_Group
//!   - \ref NUC1xx_RTC_API_Group_Config
//!   - \ref NUC1xx_RTC_API_Group_Time
//!   - \ref NUC1xx_RTC_API_Group_Interrupt
//!   .
//! - \ref NUC1xx_RTC_Usage
//! .
//!
//! \n
//! \section NUC1xx_RTC_Block 1. RTC Physical Block
//! <img src="NUC1xx_RTC_block.png" />
//! 
//! \n
//! \section NUC1xx_RTC_Function_Desc 2. Functional Description
//!
//! Real Time Clock (RTC) controller provides users with the real time and 
//! clendar messages.The RTC controller provides the time messages (second, minute, hour)
//! in Time Loading Register (TLR) as well as calendar messages (day, month, year) 
//! in Calendar Loading  Register (CLR). It also offers an alarm function so that 
//! users can preset alarm time in Time Alarm Register (TAR) and alarm calendar
//! in Calendar Alarm Register (CAR).  
//!
//! The RTC controller supports periodic Time Tick and Alarm Match interrupts.
//! 
//! \n
//! \section NUC1xx_RTC_API_Group 3. API Groups
//! 
//! The RTC API is broken into three groups of functions: 
//! - those that deal with RTC initialization , 
//! - those that deal with time reading and writing, 
//! - those that deal with interrupt.
//! .
//!
//! \n
//! \subsection NUC1xx_RTC_API_Group_Config 3.1 RTC Config APIs
//! 
//! The RTC pins are configured with :
//! - RTCTimeInit() 
//! - RTCStart() 
//! - RTCStop() 
//! - RTCFrequencyCompensationSet()    
//! - RTCTickModeSet(). 
//! .
//! 
//! \n
//! \subsection NUC1xx_RTC_API_Group_Time 3.2 RTC time reading and writing APIs
//! 
//! The RTC write and read are through APIS below:
//! - RTCTimeRead()
//! - RTCTimeWrite().
//! .
//!
//! \n
//! \subsection NUC1xx_RTC_API_Group_Interrupt 3.3 RTC interrupt APIs
//! 
//! The RTC interrupt can be handled with:
//! - RTCIntCallbackInit()
//! - RTCIntEnable()
//! - RTCIntDisable()
//! - RTC_IRQHandler().
//! .
//!
//! \n
//! \section NUC1xx_RTC_Usage 4. Usage & Program Examples
//! The following example shows how to use the RTC APIs to initialize the 
//! RTC, enable interrupts,read data from pins, and write data to pins.
//! 
//! \code
//!tTime tTime1, tTime2;
//!unsigned long ulj;
//!unsigned long ulTimeAlarm[2] = {RTC_TIME_CURRENT, RTC_TIME_ALARM};
//!unsigned long ulMode[8] = {RTC_TIME_TICK_1, RTC_TIME_TICK_1_2, RTC_TIME_TICK_1_4,
//!                           RTC_TIME_TICK_1_8, RTC_TIME_TICK_1_16, RTC_TIME_TICK_1_32,
//!                           RTC_TIME_TICK_1_64, RTC_TIME_TICK_1_128};
//!
//!unsigned long xRTCCallback(void *pvCBData, 
//!                                       unsigned long ulEvent,
//!                                       unsigned long ulMsgParam,
//!                                       void *pvMsgData)
//!{
//!    xIntMasterDisable();
//!    ulj++;
//!    return 0;
//!}
//!static void xrtc001Int()
//!{
//!    RTCTimeInit();
//!    
//!    tTime2.ulSecond = 40;     
//!    
//!    tTime2.ulMinute = 20; 
//!    
//!    tTime2.ulHour = 17; 
//!    
//!    tTime2.ulMDay = 11;  
//!    
//!    tTime2.ulMonth = 8;   
//!    
//!    tTime2.ulYear = 2011;    
//!    
//!    tTime2.ulWDay = 3;   
//!
//!    tTime2.ulFormat = RTC_TIME_24H;
//!    
//!    //
//!    //write current time to corresponding register.
//!    //
//!    RTCTimeWrite(&tTime2, ulTimeAlarm[0]);
//!    
//!    RTCWriteEnable();
//!    
//!    //
//!    //alarm interrupt after 20 seconds.
//!    //
//!    tTime2.ulSecond +=10;
//!    
//!    //
//!    //write current time to corresponding register.
//!    //
//!    RTCTimeWrite(&tTime2, ulTimeAlarm[1]);
//!    
//!    RTCWriteEnable();
//!    
//!    RTCIntCallbackInit(xRTCCallback);
//!    
//!    xIntEnable(INT_RTC);
//!    xIntMasterEnable();
//!    //
//!    //enable alarm interrupt.
//!    //
//!    RTCIntEnable(RTC_INT_ALARM);
//!    
//!    TestAssert(RTC_INT_ALARM == ( xHWREG(RTC_RIER) & 0x00000003),
//!		  "xrtc API \"RTCIntEnable\" error!");
//!   
//!    while(ulj !=1);
//!    
//!    //
//!    //disable alarm interrupt.
//!    //
//!    RTCIntDisable(RTC_INT_ALARM);
//!   
//!    xIntMasterEnable();
//!    //
//!    //set second interrupt.
//!    //
//!    RTCTickModeSet(ulMode[0]);
//!   
//!    //
//!    //enable tick interrupt.
//!    //
//!    RTCIntEnable(RTC_INT_TIME_TICK);
//!    
//!    TestAssert(RTC_INT_TIME_TICK == ( xHWREG(RTC_RIER) & 0x00000003),
//!		  "xrtc API \"RTCIntEnable\" error!");
//! 
//!    while(ulj !=2);
//!    
//!    TestAssert(1 == 1,
//!		  "xrtc API \"RTCIntCallbackInit\" error!");
//!}
//! \endcode
//! 
//! 
//
//*****************************************************************************
