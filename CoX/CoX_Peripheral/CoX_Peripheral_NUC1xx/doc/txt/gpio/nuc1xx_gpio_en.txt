//*****************************************************************************
//
//! \defgroup NUC1xx_GPIO NUC1xx GPIO
//! 
//! \brief Nuvoton NUC1xx GPIO Peripheral Driver.
//!
//! The CoX Peripheral Library also provides APIs for full functions of Nuvoton
//! NUC1xx GPIO. This module supports the whole NUC1xx Series.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref NUC1xx_GPIO_Blcok
//! - \ref NUC1xx_GPIO_Function_Desc
//! - \ref NUC1xx_GPIO_API_Group
//!   - \ref NUC1xx_GPIO_API_Group_Config
//!   - \ref NUC1xx_GPIO_API_Group_Interrupt
//!   - \ref NUC1xx_GPIO_API_Group_Pin
//!   .
//! - \ref NUC1xx_GPIO_Usage
//! .
//!
//! <br />
//! \section NUC1xx_GPIO_Blcok 1. GPIO Physical Block
//! <img src="NUC1xx_gpio_block.png" />
//! 
//! <br />
//! \section NUC1xx_GPIO_Function_Desc 2. Functional Description
//! Each pin has the following capabilities:
//! - Can be configured as an input or an output. 
//! - In input mode, can generate interrupts on high level, low level, 
//! both level, rising edge, falling edge, or both edges.
//! - In output mode, can be set high level or low level. 
//! - Optional quasi-bidirection operation. On reset, they default to quasi-bidirection operation.
//! - Optional open-drain operation.  
//! - Can be configured to be a GPIO or a peripheral pin. On reset, they 
//! default to being GPIOs.
//! .
//! 
//! <br />
//! \section NUC1xx_GPIO_API_Group 3. API Groups
//! 
//! The GPIO API is broken into three groups of functions: 
//! - those that deal with configuring the GPIO pins, 
//! - those that deal with interrupts, 
//! - those that access the pin value.
//! .
//!
//! <br />
//! \subsection NUC1xx_GPIO_API_Group_Config 3.1 GPIO Config APIs
//! 
//! The GPIO pins are configured with:
//! - GPIODirModeSet(),
//! - GPIOPinDebounceEnable(),
//! - GPIOPinDebounceDisable(),
//! - GPIOPinMaskSet(),
//! - GPIODebounceTimeSet(),
//! - GPIOPinFunctionSet(),
//! - GPIOPinConfigure().
//! .
//! The configuration can be read back with:
//! - GPIODirModeGet(),
//! - GPIOPortMaskGet(),
//! - GPIODebounceTimeGet().  
//!.
//! 
//! There are also convenient
//! functions for configuring the pin in the required or recommended 
//! configuration for a particular peripheral; these are :
//! - GPIOPinFunctionSet(GPIO_FUNCTION_ADC, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_CAN, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_I2C, eShortPin),
//! - GPIOPinFunctionSet(GPIO_FUNCTION_I2S, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_PWM, eShortPin),
//! - GPIOPinFunctionSet(GPIO_FUNCTION_SPI, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_TIM, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_UART, eShortPin),
//! - GPIOPinFunctionSet(GPIO_FUNCTION_ACMP, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_CLKO, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_EXTINT, eShortPin), 
//! - GPIOPinFunctionSet(GPIO_FUNCTION_EBI, eShortPin).
//! .
//! 
//! <br />
//! \subsection NUC1xx_GPIO_API_Group_Interrupt 3.2 GPIO Interrupt APIs
//! 
//! The GPIO interrupts are handled with: 
//! - GPIOPinIntCallbackInit(),
//! - GPIOPinIntEnable(),
//! - GPIOPinIntDisable(), 
//! - GPIOPinIntStatus(), 
//! - GPIOPinIntClear().
//! .
//!
//! <br />
//! \subsection NUC1xx_GPIO_API_Group_Pin 3.3 GPIO Pin State APIs
//! 
//! The GPIO pin state is accessed with:
//! - GPIOPinRead(),
//! - GPIOPinWrite(),
//! - GPIOPinPortDoutGet().
//! .
//!
//! <br />
//! \section NUC1xx_GPIO_Usage 4. Usage & Program Examples
//! The following example shows how to use the GPIO API to initialize the 
//! GPIO, enable interrupts, read data from pins, and write data to pins.
//! 
//! \code
//! int iVal;
//!
//! //
//! // Initialize the GPIO pin configuration.
//! //
//! // Set pins 2, 4, and 5 as input, SW controlled.
//! GPIODirModeSet(GPIO_PORTA_BASE,
//!                      GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_DIR_MODE_IN);
//! //
//! // Set pins 0 and 3 as output, SW controlled.
//! //
//! GPIODirModeSet(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_3, GPIO_DIR_MODE_OUT);
//! //
//! // Make pins 2 and 4 rising edge triggered interrupts.
//! //
//! GPIOPinIntEnable(GPIO_PORTA_BASE, GPIO_PIN_2 | GPIO_PIN_4, GPIO_RISING_EDGE);
//! //
//! // Make pin 5 high level triggered interrupts.
//! //
//! GPIOPinIntEnable(GPIO_PORTA_BASE, GPIO_PIN_5, GPIO_HIGH_LEVEL);
//! //
//! // Read some pins.
//! //
//! iVal = GPIOPinRead(GPIO_PORTA_BASE,
//!                    (GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 |
//!                     GPIO_PIN_4 | GPIO_PIN_5));
//! //
//! // Write some pins. Even though pins 2, 4, and 5 are specified, those
//! // pins are unaffected by this write since they are configured as inputs.
//! // At the end of this write, pin 0 will be a 0, and pin 3 will be a 1.
//! //
//! GPIOPinWrite(GPIO_PORTA_BASE,
//!              (GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 |
//!               GPIO_PIN_4 | GPIO_PIN_5),
//!              0xF8);
//! //
//! // Enable the pin interrupts.
//! //
//! GPIOPinIntEnable(GPIO_PORTA_BASE, GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_BOTH_EDGES);
//!
//! \endcode
//! 
//! 
//
//*****************************************************************************
