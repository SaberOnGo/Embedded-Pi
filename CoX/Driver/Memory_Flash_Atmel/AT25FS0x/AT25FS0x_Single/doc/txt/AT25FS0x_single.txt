//*****************************************************************************
//
//!
//! \defgroup AT25FS0x
//!
//! \brief This is the AT25FS0x series Driver.
//! 
//! AT25FS0x is low-voltage, Serial Flash memory with SPI bus interface.
//! AT25FS0x series containing 2 chips:AT25FS010,AT25FS040.
//! The chip size is from 1 Mbit (128 Kbit ¡Á 8), to 4 Mbit (1 Mbit ¡Á 8).
//!
//! <h1>Contents</h1>
//! - \ref AT25FS0x_Blcok
//! - \ref AT25FS0x_Pins
//! - \ref AT25FS0x_SPI_MODE
//! - \ref AT25FS0x_Function_Desc
//! .
//!
//! \section AT25FS0x_Blcok 1. AT25FS0x Physical Block
//! <img src="AT25FS0x.png" />
//!
//! \section AT25FS0x_Pins 2. AT25FS0x Signal names
//! <img src="AT25FS0x_Pins.png" />
//!
//! \section AT25FS0x_SPI_MODE 3. AT25FS0x supported SPI mode
//! These devices can be driven by a microcontroller with its SPI peripheral 
//! running in either of the two following modes:
//! - CPOL=0, CPHA=0    \ref xSPI_MOTO_FORMAT_MODE_0
//! - CPOL=1, CPHA=1    \ref xSPI_MOTO_FORMAT_MODE_3
//! .
//! For these two modes, input data is latched in on the rising edge of Serial
//! Clock (C), and output data is available from the falling edge of Serial Clock (C).
//!
//! \section AT25FS0x_Function_Desc 4. AT25FS0x Instructions
//! - Write Enable                 \ref AT25FS0x_CMD_WREN
//! - Write Disable                \ref AT25FS0x_CMD_WRDI
//! - Read Identification          \ref AT25FS0x_CMD_RDID
//! - Read Status Register         \ref AT25FS0x_CMD_RDSR
//! - Write Status Register        \ref AT25FS0x_CMD_WRSR
//! - Read Data Bytes              \ref AT25FS0x_CMD_READ
//! - Read Data Bytes at Higher Speed \ref AT25FS0x_CMD_FAST_READ
//! - Page Program                 \ref AT25FS0x_CMD_PP
//! - Sector Erase                 \ref AT25FS0x_CMD_SE
//! - Bulk Erase                   \ref AT25FS0x_CMD_BE
//! - Chip Erase                   \ref AT25FS0x_CMD_CE
//!
//! \defgroup AT25FS0x_Driver_Single  
//!  
//! \brief This is the AT25FS0x series Driver can be used in the condition which
//! the system only have one AT25FS0x series device.
//!
//! This driver is implemented by using defines and global variables.It can only 
//! use on one device because all the APIs use the some macros and global variables.
//!
//! <h1>Contents</h1>
//! - \ref AT25FS0x_How_Define
//! - \ref AT25FS0x_API_Group
//!   - \ref AT25FS0x_API_Group_CMD
//!   - \ref AT25FS0x_API_Group_AttriGet
//!   - \ref AT25FS0x_API_Group_Special
//!   .
//! - \ref AT25FS0x_Usage 
//! .
//!
//! \section AT25FS0x_How_Define 1. How is the AT25FS0x Driver implemented?
//! Use define to config some Fixing things,such as SPI base and SPI pins
//! CS pin,use hold input or not,use write protect or not and which device
//! to use(This contains chip information).
//!
//! Use global variables to save variables use by the APIs.
//!
//! \section AT25FS0x_API_Group 2. API Groups
//! 
//! The AT25FS0x API is broken into three groups of functions: 
//! - those that deal with AT25FS0x CMD , 
//! - those that deal with AT25FS0x chip information and init, 
//! - those that deal with AT25FS0x hold input and write protect function.
//! .
//!
//! \n
//! \subsection AT25FS0x_API_Group_CMD 2.1 AT25FS0x CMD APIs
//! 
//! The AT25FS0x CMD is implemented by :
//! - AT25FS0xIDcodeGet() 
//! - AT25FS0xStatusRegRead() 
//! - AT25FS0xWaitNotBusy() 
//! - AT25FS0xWriteEnable() 
//! - AT25FS0xWriteDisable() 
//! - AT25FS0xPageWrite() 
//! - AT25FS0xDataRead() 
//! - AT25FS0xDataFastRead() 
//! - AT25FS0xBlockErase() 
//! - AT25FS0xChipErase() 
//! - AT25FS0xSectorErase() 
//! - AT25FS0xStatusRegWrite() 
//! - AT25FS0xEScodeGet() 
//! .
//!
//! \n
//! \subsection AT25FS0x_API_Group_AttriGet 2.2 AT25FS0x chip information get APIs
//! 
//! The AT25FS0x chip information is get by :
//! - AT25FS0xEScodeGet() 
//! - AT25FS0xPageSizeGet() 
//! - AT25FS0xSectorSizeGet() 
//! - AT25FS0xChipSizeGet() 
//! - AT25FS0xInit() 
//! - AT25FS0xDisable() 
//! .
//!
//! \n
//! \subsection AT25FS0x_API_Group_Special 2.3 AT25FS0x Special functions APIs
//! 
//! The AT25FS0x chip information is get by :
//! - AT25FS0xHoldEnable() 
//! - AT25FS0xHoldDisable() 
//! - AT25FS0xWriteProtectEnable() 
//! - AT25FS0xWriteProtectDisable() 
//! .
//!
//! \section AT25FS0x_Usage 1. Usage & Program Examples
//! 
//! 
//! \code
//!//*****************************************************************************
//!//
//!//! \file Example.c
//!//! \brief the AT25FS0x Example.
//!//! \version 1.0
//!//! \date 10/15/2011
//!//! \author CooCox
//!//! \copy
//!//!
//!//! Copyright (c)  2011, CooCox 
//!//! All rights reserved.
//!//! 
//!//! Redistribution and use in source and binary forms, with or without 
//!//! modification, are permitted provided that the following conditions 
//!//! are met: 
//!//! 
//!//!     * Redistributions of source code must retain the above copyright 
//!//! notice, this list of conditions and the following disclaimer. 
//!//!     * Redistributions in binary form must reproduce the above copyright
//!//! notice, this list of conditions and the following disclaimer in the
//!//! documentation and/or other materials provided with the distribution. 
//!//!     * Neither the name of the <ORGANIZATION> nor the names of its 
//!//! contributors may be used to endorse or promote products derived 
//!//! from this software without specific prior written permission. 
//!//! 
//!//! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//!//! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
//!//! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//!//! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
//!//! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
//!//! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
//!//! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//!//! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
//!//! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
//!//! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
//!//! THE POSSIBILITY OF SUCH DAMAGE.
//!//*****************************************************************************
//!#include "AT25FS0x.h"
//!#include "xhw_ints.h"
//!#include "xhw_nvic.h"
//!#include "xhw_memmap.h"
//!#include "xhw_types.h"
//!#include "xdebug.h"
//!#include "xcore.h"
//!#include "xsysctl.h"
//!#include "xhw_sysctl.h"
//!#include "xhw_gpio.h"
//!#include "xgpio.h"
//!#include "xhw_uart.h"
//!#include "xuart.h"
//!unsigned char ucWriteData[];
//!//
//!//! Get the Length of data will be oparated
//!//
//!#define Length 256
//!
//!unsigned char ucReadData[Length];
//!
//!//*****************************************************************************
//!//
//!//! \brief Init uart to print.
//!//!
//!//! \param None
//!//!
//!//! \details uart config as (115200, 8 data bit, 1 stop bit , no partiy)
//!//!
//!//! \return None.
//!//
//!//*****************************************************************************
//!static 
//!void UartInit(void)
//!{
//!    xSPinTypeUART(UART0RX,PB0);
//!    xSPinTypeUART(UART0TX,PB1);
//!
//!    xSysCtlPeripheralReset(xSYSCTL_PERIPH_UART0);
//!    xSysCtlPeripheralEnable(xSYSCTL_PERIPH_UART0);
//!    
//!    xSysCtlPeripheralClockSourceSet(xSYSCTL_UART0_MAIN, 1);
//!
//!    xUARTConfigSet(UART0_BASE, 115200, (UART_CONFIG_WLEN_8 |
//!                                        UART_CONFIG_STOP_ONE | 
//!                                        UART_CONFIG_PAR_NONE));
//!}
//!
//!//*****************************************************************************
//!//
//!//! \brief print a char.
//!//!
//!//! \param None
//!//!
//!//! \return None.
//!//
//!//*****************************************************************************
//!void 
//!UartPrintfChar(char ch)
//!{
//!    unsigned char c;
//!    c = ch;
//!    while(!xUARTSpaceAvail(xUART0_BASE));
//!  
//!    //
//!    // Write this character to the transmit FIFO.
//!    //
//!    xUARTCharPut(xUART0_BASE, c);
//!}
//!
//!//*****************************************************************************
//!//
//!//! \brief Prints a decimal unsigned number.
//!//!
//!//! \param n is the number to be printed
//!//!
//!//! \details Prints a decimal unsigned number.
//!//!
//!//! \return None.
//!//
//!//*****************************************************************************
//!static 
//!void UartPrintfNumber(unsigned long n)
//!{
//!    char buf[16], *p;
//!
//!    if (n == 0)
//!    {
//!        UartPrintfChar('0');
//!    }
//!    else
//!    {
//!        p = buf;
//!        while (n != 0)
//!        {
//!            *p++ = (n % 10) + '0';
//!            n /= 10;
//!        }
//!
//!        while (p > buf)
//!            UartPrintfChar(*--p);
//!    }
//!}

//!//*****************************************************************************
//!//
//!//! \brief The example of the function of read and write.
//!//!
//!//! \param None
//!//!
//!//! \details The example of the function of read and write.
//!//! \return None.
//!//
//!//*****************************************************************************
//!void AT25FS0xReadWrite(void)
//!{
//!    unsigned long i;
//!    unsigned short ulID; 
//!    //
//!    // Set SysClk 50MHz using Extern 12M oscillator
//!    //
//!    xSysCtlClockSet(50000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_12MHZ);
//!    UartInit(); 
//!    AT25FS0xInit(10000000);
//!    
//!    ulID = AT25FS0xIDcodeGet();
//!    i = ulID;
//!    UartPrintfNumber(ulID);
//!    UartPrintfChar('\n');
//!    UartPrintfChar('\r');
//!    
//!    for(i = 0; i < Length; i++)
//!    {
//!        ucWriteData[i] = i;      
//!    }
//!
//!    //
//!    // Erase all chip
//!    //
//!    AT25FS0xChipErase();
//!    //
//!    // write data to W25Xxx
//!    //
//!    AT25FS0xWrite(ucWriteData, 100, Length);
//!    SysCtlDelay(50000000);
//!    AT25FS0xDataRead(ucReadData, 100, Length);
//!    for(i = 0; i < Length; i++)
//!    {
//!        UartPrintfChar(ucReadData[i]);      
//!    }
//!}
//! \endcode
//!
//
//*****************************************************************************