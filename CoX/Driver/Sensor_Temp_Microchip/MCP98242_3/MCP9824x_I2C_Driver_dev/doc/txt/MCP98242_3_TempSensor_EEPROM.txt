
//*****************************************************************************
//
//!
//! \addtogroup MCP98242_TempSensor_EEPROM
//! @{
//!
//! Microchip Technology Inc.'s MCP98242 digital
//! temperature sensor converts temperature from -40°„C 
//! and +125°„C to a digital word. This sensor meets
//! JEDEC Specification JC42.4 Mobile Platform Memory
//! Module Thermal Sensor Component. It provides an
//! accuracy of °¿0.5°„C/°¿1°„C(typical/maximum) from
//! +75°„C to +95°„C. In addition, this device has an internal
//! 256 Byte EEPROM which can be used to store memory
//! module and vendor information. 
//!
//! <h1>Contents</h1>
//! - \ref MCP98242_3_Features
//!   - \ref MCP98242_3_Features_
//!   - \ref MCP98242_3_TempSensor_Features
//!   - \ref MCP98242_3_EEPROM_Features
//!   - \ref MCP98242_3_Conv_Time
//!   - \ref MCP98242_3_Event_Out
//!   - \ref MCP98242_3_Diff
//!   .
//! - \ref MCP98242_3_APIs
//!   - \ref MCP98242_3_Temp_APIs
//!   - \ref MCP98242_3_EEPROM_APIs
//!   .
//! - \ref MCP98242_3_Typical_App 
//! - \ref MCP98242_3_Package
//!   - \ref MCP98242_3_Package_
//!   - \ref MCP98242_3_Connection
//!   .
//! - \ref MCP98242_3_Usage
//! .
//! 
//! <br />
//!
//! \section MCP98242_3_Features 1. MCP98242_3 Features
//!
//! <br />
//!
//! \subsection MCP98242_3_Features_ 1.1 Features
//! - Temperature Sensor + 256 Byte Serial EEPROM
//! - EEPROM for Serial Presence Detect (SPD)
//! - Optimized for Voltage Range: 3.0V to 3.6V
//! - Shutdown/Standby Current: 3 ¶ÃA (maximum)
//! - 2-wire Interface: I2C/SMBus Compatible
//! - Available Packages: DFN-8, TDFN-8, UDFN-8, TSSOP-8 
//! .
//! 
//! \subsection MCP98242_3_TempSensor_Features 1.2 Temperature Sensor Features
//! - Temperature-to-Digital Converter
//! - Operating Current: 200 ¶ÃA (typical)
//! - Accuracy:
//!   - °¿0.5°„C/°¿1°„C (typ./max.) -> +75°„C to +95°„C
//!   - °¿1°„C/°¿2°„C (typ./max.) -> +40°„C to +125°„C
//!   - °¿2°„C/°¿3°„C (typ./max.) -> -20°„C to +125°„C
//!   .
//! .
//! 
//!
//! <br />
//!
//! \subsection MCP98242_3_EEPROM_Features 1.3 Serial EEPROM Features
//! - Operating Current: 
//!   - Write -> 1.1 mA (typical) for 3.5 ms (typical)
//!   - Read -> 100 ¶ÃA (typical)
//!   .
//! - Permanent and Reversible Software Write-Protect
//! - Software Write Protection for the Lower 128 Bytes
//! - Organized as 1 Block of 256 Bytes (256x8)
//! .
//!
//! <br />
//!
//! \subsection MCP98242_3_Conv_Time 1.4 TEMPERATURE CONVERSION TIME
//!
//! <img src="MCP TEMPERATURE CONVERSION TIME.png" />
//!
//! <br />
//!
//! \subsection MCP98242_3_Event_Out 1.5 Event Output Condition
//!
//! <img src="MCP Event Output Condition.png" />
//!
//! <br />
//!
//! \subsection MCP98242_3_Diff 1.6 Difference between MCP98242 and MCP98243
//!
//! <img src="MCP MCP98242 vs MCP98243.png" />
//!
//! <br />
//!
//! \section MCP98242_3_APIs 2. MCP98242_3 APIs
//!
//! <br />
//! \subsection MCP98242_3_Temp_APIs 2.1 MCP98242_3 Temperature Sensor APIs
//!
//! These APIs are methods to configure the temperature sensor, and get the ambient 
//! temperature.
//!
//! - MCP98242RegSet(MCP98242Dev *pDev, void *vpValue, unsigned char ucType, unsigned char ucTransType)
//! - MCP98242RegGet(MCP98242Dev *pDev, void *vpValue, unsigned char ucType, unsigned char ucTransType)
//! - MCP98242SensorInit(MCP98242Dev *pDev, unsigned long ulRate)
//! - MCP98242CapGet(MCP98242Dev *pDev)
//! - MCP98242Config(MCP98242Dev *pDev, unsigned short usConfig, unsigned long ulResol, unsigned long ulHyst)
//! - MCP98242IntEnable(MCP98242Dev *pDev)
//! - MCP98242IntConfig(MCP98242Dev *pDev, xtEventCallback xtIntCallback, unsigned long ulTrigMode, unsigned long ulEventMode)
//! - MCP98242IntClear(MCP98242Dev *pDev)
//! - MCP98242IntDisable(MCP98242Dev *pDev)
//! - MCP98242SHDNEnable(MCP98242Dev *pDev)
//! - MCP98242SHDNDisable(MCP98242Dev *pDev)
//! - MCP98242EvnCondGet(MCP98242Dev *pDev)
//! - MCP98242LimitSet(MCP98242Dev *pDev, void *vpValue, unsigned char ucLimitType)
//! - MCP98242TempGet(MCP98242Dev *pDev, void *vpValue, unsigned char ucDataType)
//! - MCP98242GetID(MCP98242Dev *pDev, MCP98242_ID *id)
//! .
//!
//! <br />
//! \subsection MCP98242_3_EEPROM_APIs 2.2 MCP98242_3 EEPROM APIs
//!
//! The APIs are methods to write and read EEPROM.
//!
//! - MCP98242EEPROMInit(MCP98242Dev *pDev, unsigned long ulRate)
//! - MCP98242ByteWrite(MCP98242Dev *pDev, unsigned char ucAddr, unsigned char ucValue)
//! - MCP98242PageWrite(MCP98242Dev *pDev, unsigned char ucAddr, unsigned char *ucpValue)
//! - MCP98242ByteRead(MCP98242Dev *pDev, unsigned char ucAddr)
//! - MCP98242MemRead(MCP98242Dev *pDev, unsigned char ucAddr, unsigned char *ucpValue, unsigned char ucNum)
//! - MCP98242ProtWrite(MCP98242Dev *pDev, unsigned char ucAddr, unsigned char ucValue, unsigned char cType)
//! - MCP98242ProtClear(MCP98242Dev *pDev, unsigned char ucAddr)
//! .
//!
//! <br />
//! 
//! \section MCP98242_3_Typical_App 3. Typical Applications
//! - DIMM Modules
//! - Laptops, Personal Computers and Servers
//! - Hard Disk Drives and Other PC Peripherals
//! .
//! <img src="MCP DIMM MODULE.png" />
//!
//! <br />
//!
//! \section MCP98242_3_Package 4. Package Types and Connection
//!
//! <br />
//! \subsection MCP98242_3_Package_ 4.1 Package Types
//! This sensor has an industry standard 2-wire, I2C/SMBus 
//! compatible serial interface, allowing up to eight
//! devices to be controlled in a single serial bus. To
//! maintain interchangeability with the I2C/SMBus
//! interface the electrical specifications are specified with
//! the operating voltage of 3.0V to 3.6V. In addition, a
//! 40 ms (typical) time out is implemented.
//!
//! <img src="MCP Package Types.png" />
//!
//! <br />
//!
//! \subsection MCP98242_3_Connection 4.2 Connecting to the Serial Bus
//! The SDA and SCLK serial interface pins are
//! open-drain pins that require pull-up resistors. This
//! configuration is shown as below.
//!
//! <img src="SDA and SCLK serial interface.png" />
//! 
//! \n
//!
//! \section MCP98242_3_Usage 5. MCP98242_3 Usage
//!
//! <ul>
//! <li>When you select MCP98243, you should define a macro "MCP98243".</li>
//! <li>When used as \b temperature \b sensor, you can connect \b A0 and \b A1 to \b GND, connect \b A2 to \b VCC3.3, and then the \b slave \b address in the driver is set to \b 0x1C.</li>
//! <li>When used as \b EEPROM and \b Software \b Write-Protect, you should apply \b VHI_WP at \b A0 pin and connect \b GND to \b A1 and \b A2 pins. The \b slave \b address is fixed as \b 0x31.</li>
//! <li>When used as \b EEPROM and \b Clear \b Write-Protect, you should apply \b VHI_WP at \b A0 pin, apply \b VDD at \b A1 pin, connect \b A2 pin to \b GND. The \b slave \b address is fixed as \b 0x33.</li>
//! <li>When used as \b EEPROM and \b Permanent \b Write-Protect, you can apply \b VDD at \b A0, \b A1 and \b A2 pins, and then the \b slave \b address is \b 0x37.</li>
//! <li>Connect the \b SCL and \b SDA pins to the \b master board \b I2C port.</li>
//! <li>Connect the \b Event pin to one \b GPIO pin of \b master board.</li>
//! <li>The pull-up resistor values for a \b 3.3V system ranges \b 9k¶∏ to \b 33k¶∏.</li>
//! <li>It is recommended that a decoupling capacitor of \b 0.1¶ÃF to \b 1¶ÃF be used between the \b VDD and \b GND pins. </li>
//! </ul> 
//!
//! \n\n\n
//!
//! @}
//
//******************************************************


//******************************************************
//
//!
//! \addtogroup MCP98242_App MCP98242 Applications
//! @{
//!
//! 
//! \defgroup MCP98242_3_TempGet Get Temperature Example
//!
//! \brief Get Temperature Example.
//!
//! Here we introduce how to get ambient temperature with MCP98242.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref MCP98242_3_TempGet_Steps
//! - \ref MCP98242_3_TempGet_Code
//! .
//!
//! <br />
//! \section MCP98242_3_TempGet_Steps 1.How to configure MCP98242. 
//!
//! <ol>
//! <li>Select and enable I2C, configure I2C clock rate and related GPIO Pins.</li>
//! <li>
//! Set MCP98242_3Dev struct: <br />
//!  (a). I2C Base <br />
//!  (b). Temperature Sensor Slave Address <br />
//!  (c). EEPROM Slave Address <br />
//!  (d). PWP Slave Address <br />
//!  (e). Event Pin <br />
//!  (f). Event Interrupt ID <br />
//!  (g). Function to configure the GPIO Pins. 
//! </li>
//! <li>Set callback function for MCP98242_3 Event Output.</li>
//! <li>Initialize the temperature sensor.</li>
//! <li>Set the upper, lower, and critical temperature.</li>
//! <li>Set RESOLUTION, HYSTERESIS.</li>
//! <li>
//! Configure the Interrupt. <br />
//!  (a). Specify the device <br />
//!  (b). Initialize the callback funtion <br />
//!  (c). Event Alert Polarity: Low Level <br />
//!  (d). Event Mode: Comparator
//! </li>
//! <li>Enable MCP98242_3 Interrupt.</li>
//! </ol>
//!
//! <br />
//! \section MCP98242_3_TempGet_Code 2.The code to get ambient temperature.
//!
//! \code
//! 
//! #include "xhw_types.h"
//! #include "xhw_memmap.h"
//! #include "xcore.h"
//! #include "xi2c.h"
//! #include "xsysctl.h"
//! #include "xhw_sysctl.h"
//! #include "xgpio.h"
//! #include "xhw_ints.h"
//! #include "MCP98242_3.h"
//!
//! volatile  unsigned char Event_mode = 0;
//!
//! volatile  unsigned char Int_Status = 0;
//!
//! unsigned long test_Sen_Event (void *pvCBData, 
//!                                    unsigned long ulEvent,
//!                                    unsigned long ulMsgParam,
//!                                    void *pvMsgData);
//!
//! int test_led(void);
//!
//! //
//! // Enable I2C, GPIO clock
//! // Set pins to I2C funciton
//! //
//! void pinSet()
//! {
//!     //
//!     // Enable GPIO Clock
//!     //
//!     xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PA8));
//!     xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PA9));
//!
//!     xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PB13));
//!
//!     xSPinTypeI2C(I2C0SDA, PA8);
//!     xSPinTypeI2C(I2C0SCK, PA9);
//! }
//!
//! //
//! // Set MCP98242_3Dev struct:
//! // 1. I2C Base
//! // 2. Temperature Sensor Slave Address
//! // 3. EEPROM Slave Address
//! // 4. PWP Slave Address
//! // 5. Event Pin
//! // 6. Event Interrupt ID
//! // 7. Function to configure the GPIO Pins. 
//! //
//! MCP98242Dev dev = {I2C0_BASE, 0x1C, 0x54, 0x37,xGPIOSPinToPortPin(PB13), 
//!                         xINT_GPIOB, pinSet};
//!
//! int test_led()
//! {
//!     int i;
//!     for(i=0; i<100000; i++);
//!     GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_12, 
//!         !((GPIOPinRead(GPIO_PORTC_BASE, GPIO_PIN_12) & GPIO_PIN_12)>>12));
//!     return 0;
//! }
//!
//! unsigned long test_Sen_Event (void *pvCBData, 
//!                                    unsigned long ulEvent,
//!                                    unsigned long ulMsgParam,
//!                                    void *pvMsgData)
//! {
//!     //
//!     // Int Mode
//!     //
//!     if(Event_mode)
//!     {
//!         MCP98242IntClear(&dev);
//!         Int_Status = 1;
//!     }
//!     //
//!     // Comparator Mode
//!     //
//!     else
//!         test_led();
//!
//!     return 0;
//! }
//!
//! void TempSensor_Event()
//! {
//!     unsigned short s;
//!     float f;   
//!     
//!     //
//!     // Initialize the temperature sensor.
//!     //  
//!     MCP98242SensorInit(&dev, 50000);
//!
//!     //
//!     // Set RESOLUTION: 0.125°„C, HYSTERESIS: 0°„C
//!     //
//!     //
//!     MCP98242Config(&dev, 0, MCP_RESOLUTION_125, MCP_HYSTERESIS_0);
//!
//!     for(f=0;f<1000;f++);
//!
//!     //
//!     // Set the UPPER temperature.
//!     //
//!     f = 27.0;
//!     MCP98242LimitSet(&dev, &f, MCP_UPPER);
//!     for(f=0;f<1000;f++);
//!
//!     //
//!     // Set the LOWER temperature.
//!     //
//!     f = 25.0;
//!     MCP98242LimitSet(&dev, &f, MCP_LOWER);
//!     for(f=0;f<1000;f++);
//!
//!     //
//!     // Set the CRITICAL temperature.
//!     //
//!     f = 32.0;
//!     MCP98242LimitSet(&dev, &f, MCP_CRITICAL);
//!     for(f=0;f<1000;f++);
//!
//!     //
//!     // Set the Event Output to be Comparator mode.
//!     //
//!     Event_mode = MCP_EVENT_COMP; 
//!     //Event_mode = MCP_EVENT_INT;   //You can change to Int Mode.
//!      
//!     //
//!     // Configure the Interrupt.
//!     // 1. Specify the device
//!     // 2. Initialize the callback funtion
//!     // 3. Event Alert Polarity: Low Level
//!     // 4. Event Mode: Comparator
//!     //               
//!     MCP98242IntConfig(&dev, test_Sen_Event, MCP_EVENT_LOW_LEVEL, Event_mode);
//!     for(f=0;f<100000;f++);
//!
//!     //
//!     // Enable MCP98242_3 Interrupt.
//!     //
//!     MCP98242IntEnable(&dev);
//!
//!     //
//!     // Configure PA12 for Int Mode, PC12 for Comparator Mode.
//!     //
//!     xSysCtlPeripheralEnable(SYSCTL_PERIPH_GPIO);
//!     xGPIODirModeSet(GPIO_PORTA_BASE, GPIO_BIT_12, GPIO_DIR_MODE_OUT);
//!     xGPIODirModeSet(GPIO_PORTC_BASE, GPIO_BIT_12, GPIO_DIR_MODE_OUT);
//!     GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_12, 1);
//!     GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_12, 1);
//!
//!     while(1) 
//!     { 
//!         //
//!         // Get Ambient temperature
//!         //
//!         MCP98242TempGet(&dev, &f, MCP_FLOAT);
//!         for(f=0;f<10000;f++);
//!
//!         //
//!         // For Interrupt mode.
//!         // If the T_A is above the MCP_UPPER , a interrupt will
//!         // happen and the Blue LED turns on.
//!         // If the T_A is below the MCP_UPPER - T_HYST, a interrupt will
//!         // happen and the Blue LED turns off. 
//!         //
//!         if(Int_Status)
//!         {
//!             Int_Status = 0;
//!             s = MCP98242EvnCondGet(&dev);
//!             if(s == MCP_EVENT_COND_3)
//!                 GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_12, 0);
//!             else
//!                 GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_12, 1);
//!         }
//!     }    
//! }
//!
//! int main()
//! {
//!     TempSensor_Event();
//! }
//! \endcode
//!
//!
//!
//!
//! \defgroup MCP98242_3_EEPROM_WR EEPROM Write and Read Example
//!
//! \brief EEPROM Write and Read Example.
//!
//! Here we introduce how to write and read EEPROM.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref MCP98242_3_EEPROM_WR_Steps
//! - \ref MCP98242_3_EEPROM_WR_Code
//! .
//!
//! <br />
//! \section MCP98242_3_EEPROM_WR_Steps 1.How to configure the EEPROM. 
//!
//! <ol>
//! <li>Select and enable I2C, configure I2C clock rate and related GPIO Pins.</li>
//! <li>Set the address, and write or read.</li>
//! </ol>
//!
//! <br />
//! \section MCP98242_3_EEPROM_WR_Code 2.The code write and read EEPROM.
//!
//! \code
//! 
//! #include "xhw_types.h"
//! #include "xhw_memmap.h"
//! #include "xcore.h"
//! #include "xi2c.h"
//! #include "xsysctl.h"
//! #include "xhw_sysctl.h"
//! #include "xgpio.h"
//! #include "MCP98242_3.h"
//!
//! //
//! // Enable I2C, GPIO clock
//! // Set pins to I2C funciton
//! //
//! void pinSet()
//! {
//!     //
//!     // Enable GPIO Clock
//!     //
//!     xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PA8));
//!     xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PA9));
//!
//!     xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(PB13));
//!
//!     xSPinTypeI2C(I2C0SDA, PA8);
//!     xSPinTypeI2C(I2C0SCK, PA9);
//! }
//!
//! //
//! // Set MCP98242Dev struct:
//! // 1. I2C 
//! // 2. EEPROM Slave Address
//! // 3. Function to configure the GPIO Pins. 
//! //
//! MCP98242Dev dev = {I2C0_BASE, 0, 0x54, 0, 0, 0, 0, pinSet};
//!
//! void eepromWR()
//! {
//!     unsigned char multWrite[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
//!     unsigned char page_addr_data[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
//!                                         0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
//!     unsigned char addr, *value;
//!
//!     int i;
//!
//!     //
//!     // Initialize the EEPROM.
//!     //
//!     MCP98242EEPROMInit(&dev, 20000);
//!
//!     
//!     addr = 0xA0;
//!     value = multWrite;
//!     //
//!     // Write EEPROM with the content of multWrite from address 0xA0.
//!     //
//!     for(i=0; i<8; i++, addr++)
//!     {
//!         MCP98242ByteWrite(&dev, addr, multWrite[i]);
//!         xSysCtlDelay(10000);
//!     }
//!
//!     //
//!     // Change part of multWrite.
//!     //
//!     value[0]=value[1]=value[2]=0x55;
//!     SysCtlDelay(10000);
//!
//!     //
//!     // Read from address 0xA0 of EEPROM.
//!     //
//!     MCP98242MemRead(&dev, addr, value, sizeof(multWrite));
//!
//!     if(page_addr_data[2] == 0x02)
//!     {
//!         //MCP98242ByteWrite and Read succeed!
//!     }
//!
//!     addr = 0xB0;
//!     value = page_addr_data;
//!
//!     //
//!     // Write a Page from address 0xB0 with content of page_addr_data.
//!     //
//!     MCP98242PageWrite(&dev, addr, value);
//!
//!     //
//!     // Change part of page_addr_data.
//!     //
//!     value[0]=value[1]=value[2]=value[15]=value[14]=value[13]=0x55;
//!     SysCtlDelay(10000);
//!
//!     //
//!     // Read from address 0xB0 of EEPROM.
//!     //
//!     MCP98242MemRead(&dev, addr, value, sizeof(page_addr_data));
//!
//!     if(page_addr_data[13] == 0x0D)
//!     {
//!         //PageWrite and Read succeed!
//!     }
//!
//!     //
//!     // Change part of page_addr_data.
//!     //
//!     value[0]=value[1]=value[2]=value[13]=value[14]=0x55;
//!     
//!     //
//!     // Sequential Read, read 15 byte sequentially from address 0xB0 of EEPROM.
//!     //
//!     MCP98242MemRead(&dev, addr, value, 15);
//!
//!     if(page_addr_data[13] == 0x0D)
//!     {
//!         //Sequential Read succeed!
//!     }
//!
//!     //
//!     // Current Address Read.We will read from address 0xBF.
//!     // Value in address 0xBF equels page_addr_data[15].
//!     //
//!     MCP98242MemRead(&dev, 0, value, 0);
//!
//!     if(*value == 0x0F)
//!     {
//!         //Current Address Read succeed!
//!     }
//!    
//! }
//!
//! int main()
//! {
//!     eepromWR();
//!     return 0;
//! }
//!
//! \endcode
//!
//! @}
//
//*****************************************************************************


//*****************************************************************************
//
//!
//! \addtogroup CoX_Driver_Lib
//! @{
//! \addtogroup Sensor 
//! @{
//! \addtogroup Temperature_Sensor
//! @{
//! \addtogroup MCP98242_TempSensor_EEPROM
//! @{
//! \addtogroup MCP98242_Register
//! @{
//! @}
//! \addtogroup MCP98242_Driver
//! @{
//! @}
//! \addtogroup MCP98242_App
//! @{
//! @}
//! @}
//! @}
//! @}
//! @}
//
//*****************************************************************************